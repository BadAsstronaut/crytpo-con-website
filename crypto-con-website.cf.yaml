AWSTemplateFormatVersion: 2010-09-09

Parameters:
  S3Bucket:
    Description: S3 Bucket with Lambda source
    Type: String
  S3GlobeePaymentKey:
    Description: Path of the source code .zip file to process Globee payments
    Type: String
  S3InitKey:
    Description: Path of the source code .zip file to load the initial db state
    Type: String

Resources:
  # DynamoDB table
  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CryptoCon
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: "S"
        - AttributeName: SortKey
          AttributeType: "S"
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: SortKey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # IAM Roles
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "1"
                Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: dynamodb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "2"
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/CryptoCon*

  # Lambdas & Lambda permissions
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3InitKey
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10

  GlobeePaymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3GlobeePaymentKey
      Handler: index.globeePayment
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10

  GlobeePaymentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt GlobeePaymentFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/globee-payment

  # API Gateway API, Resources, and Methods
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: crypto-conference-payments
      Description: Crypto Conference Website Payments

  GlobeePaymentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: globee-payment
      RestApiId: !Ref RestApi

  GlobeeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GlobeePaymentResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'" # RESTRICT TO SITE BEFORE PROD!
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode":200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  GlobeePaymentPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GlobeePaymentResource
      RestApiId: !Ref RestApi
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GlobeePaymentFunction.Arn}/invocations

  # Custom
  InitTable:
    Type: Custom::InitFunction
    DependsOn: InventoryTable
    Properties:
      AutoMinorVersionUpgrade:
      BrokerName:
      DeploymentMode:
      EngineType:
      EngineVersion:
      HostInstanceType:
      PubliclyAccessible:
      Users:
        - Password:
          Username:

  # API Gateway Deployments
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: v1
    DependsOn:
      - GlobeeOptionsMethod
      - GlobeePaymentPostMethod
